#!/bin/bash

# Send the header so that i3bar knows we want to use JSON:
echo '{"version":1}'

# Begin the endless array.
echo '['

# We send an empty first array of blocks to make the loop simpler:
echo '[],'

# Now send blocks with information forever:
function setup {
	white="#ffffff"
	green="#00ff00"
	red="#ff0000"
	firstRunVPN=0 #we're just going to assume we are connected to a vpn until told otherwise
	prevNetwork='null' #just a blank name since I'm lazy and if this isn't here it'll spit out an error
	getCache
}

function refreshCache {
	time=$(command date +%s)
	if [ $((time % 60)) -eq 0 ]; then
		getCache
	fi
}

function getCache {
	localTemp=$(wget -q -O- "https://www.accuweather.com/en/us/new-york-ny/10017/weather-forecast/349727" | awk -F\' '/acm_RecentLocationsCarousel\.push/{print $12 }'| head -1)
	nextClass=$(bash /home/blemay360/bin/classSchedule/classSchedule.sh)
}

function getIPs {
	LOCALIP=$(command ifconfig wlp1s0 | grep "inet addr")
	LOCALIP=${LOCALIP%%B*0}
	LEN=${#LOCALIP}
	LOCALIP=${LOCALIP:20:$LEN-22}
	IP=$(command wget -qO- http://ipecho.net/plain ; echo)
}

function print {
	message=$1
	color=$2
	echo '{"full_text":"'$message'","color":"'$color'"},'
}

function hexcolor {
	bat=$1
#       python -c 'print int(round('$red', 0)), int(round('$green', 0))'
        red=$(echo 255-$bat*2.55 | bc)
        green=$(echo $bat*2.55 | bc)
        green=$(echo "obase=16; ${green%.*}" | bc)
        red=$(echo "obase=16; ${red%.*}" | bc)
        if [ ${#red} = 1 ]; then
                red="0"$red
        fi
        if [ ${#green} = 1 ]; then
                green="0"$green
	fi
        hexcolor="#"$red$green"00"
#       echo $red $green
}

function batstat {
	green="#00ff00"
	red="#ff0000"
	BATSTAT=$(command upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -E "state")
	BATSTAT=${BATSTAT:25}
	if [ $BATSTAT = "discharging" ] && [ $bat -le 15 ]; then
		print "Discharging" $red
	elif [ $BATSTAT = "discharging" ]; then
		print "Discharging" $white
	elif [ $BATSTAT = "charging" ]; then
		print "Charging" $green
	elif [ $BATSTAT = "fully-charged" ]; then
		print "Charged" $green 
	fi
	
}

function batperc {
	BATPERC=$(command upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -E "percentage")
	BATPERC=${BATPERC:24}
	bat=${BATPERC::-1}
	hexcolor $bat
	print $BATPERC $hexcolor
}

function network {
	NETWORK="$(command iwconfig wlp1s0 | grep ESSID:"*")"
	NETWORK=${NETWORK:30:-3}
	print "$NETWORK" $white
	if [ "$prevNetwork" != "$NETWORK" ]; then
		sleep 3
		getIPs
	fi
	prevNetwork="$NETWORK"
}

function vpn {
#queries TUN0 to see if a vpn is enabled. If it is, it will give a whole message, otherwise it will give a short error
	TUN0=$(command ifconfig -a)
	if [ ${#TUN0} -gt 1400 ]; then
		if [ "$firstRunVPN" -eq 0 ]; then
			refreshCache
			let firstRunVPN=1
		fi
		echo {'"full_text":"VPN","color":"'$green'"'},
	elif [ "$firstRunVPN" -eq 1 ]; then
			refreshCache
			let firstRunVPN=0
	fi
}

function ipaddrs {
#only prints out local and public ip address
	print $LOCALIP $white
	print $IP $white
}

function printdate {
#retrieves date and prints it out. Only called print date because calling it date made it recursive and crashed stuff
	DATE=$(command date)
	DATE=${DATE::-9}
	DATE='"'$DATE'"'
	echo '{"full_text":'$DATE'}],'
}

function nextClass {
	if [ $nextClass != "" ]; then
		print $nextClass $white
	fi
}

function toDo {
	filename="/home/blemay360/upcoming.txt"
	while read -r line || [[ -n "$line" ]]; do
    		print "$line" $white
	done < $filename	
}

function localTemp {
	print $localTemp $white
}

function main {	
	echo "["
#	print "Houston, be advised: Rich Purnell is a steely-eyed missile man" $white
	refreshCache
	toDo
	batperc
	batstat
	network
	ipaddrs
	vpn
	localTemp	
	nextClass
	printdate
	main
}
setup
main
